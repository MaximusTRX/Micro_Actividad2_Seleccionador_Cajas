
Seleccionador_Cajas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  00800100  00800100  000004c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087b  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000670  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004a8  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001fc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a9 30       	cpi	r26, 0x09	; 9
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 00 01 	call	0x200	; 0x200 <main>
  88:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	
	EICRA	= (1<<ISC01) | (1<<ISC00);	//!< Description: Habilita que flanco genera la interrupción. Rising: 0-0. Falling: 1-0.
	//EIFR	= EIFR;						//!< Description: Flag de interrupciones externas
}

void do_Trigger(){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	80 5e       	subi	r24, 0xE0	; 224
  ac:	91 4b       	sbci	r25, 0xB1	; 177
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
  b2:	8e b3       	in	r24, 0x1e	; 30
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8e bb       	out	0x1e, r24	; 30
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_12>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	ea e8       	ldi	r30, 0x8A	; 138
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	44 96       	adiw	r24, 0x14	; 20
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	8e b3       	in	r24, 0x1e	; 30
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8e bb       	out	0x1e, r24	; 30
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_1>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	f5 99       	sbic	0x1e, 5	; 30
 112:	0f c0       	rjmp	.+30     	; 0x132 <__vector_1+0x30>
 114:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 118:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 12a:	8e b3       	in	r24, 0x1e	; 30
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8e bb       	out	0x1e, r24	; 30
 130:	0b c0       	rjmp	.+22     	; 0x148 <__vector_1+0x46>
 132:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 136:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <tEchoDOWN+0x1>
 13e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <tEchoDOWN>
 142:	8e b3       	in	r24, 0x1e	; 30
 144:	80 61       	ori	r24, 0x10	; 16
 146:	8e bb       	out	0x1e, r24	; 30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <ini_ports>:
 156:	82 e2       	ldi	r24, 0x22	; 34
 158:	84 b9       	out	0x04, r24	; 4
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	85 b9       	out	0x05, r24	; 5
 15e:	08 95       	ret

00000160 <ini_Timer1>:
 160:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16a:	80 e2       	ldi	r24, 0x20	; 32
 16c:	9e e4       	ldi	r25, 0x4E	; 78
 16e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 172:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 176:	84 e1       	ldi	r24, 0x14	; 20
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 17e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 182:	86 e0       	ldi	r24, 0x06	; 6
 184:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 188:	86 b3       	in	r24, 0x16	; 22
 18a:	86 bb       	out	0x16, r24	; 22
 18c:	08 95       	ret

0000018e <ini_ExtInterrupt>:
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8d bb       	out	0x1d, r24	; 29
 198:	8c b3       	in	r24, 0x1c	; 28
 19a:	8c bb       	out	0x1c, r24	; 28
 19c:	08 95       	ret

0000019e <ini_USART0>:
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	80 83       	st	Z, r24
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
 1aa:	88 e0       	ldi	r24, 0x08	; 8
 1ac:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b6:	80 e1       	ldi	r24, 0x10	; 16
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c2:	08 95       	ret

000001c4 <do_10ms>:
 1c4:	8e b3       	in	r24, 0x1e	; 30
 1c6:	8e 7f       	andi	r24, 0xFE	; 254
 1c8:	8e bb       	out	0x1e, r24	; 30
 1ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <time1>
 1ce:	81 50       	subi	r24, 0x01	; 1
 1d0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time1>
 1d4:	81 11       	cpse	r24, r1
 1d6:	06 c0       	rjmp	.+12     	; 0x1e4 <do_10ms+0x20>
 1d8:	82 e3       	ldi	r24, 0x32	; 50
 1da:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time1>
 1de:	8e b3       	in	r24, 0x1e	; 30
 1e0:	82 60       	ori	r24, 0x02	; 2
 1e2:	8e bb       	out	0x1e, r24	; 30
 1e4:	08 95       	ret

000001e6 <start_Med>:
 1e6:	8e b3       	in	r24, 0x1e	; 30
 1e8:	80 68       	ori	r24, 0x80	; 128
 1ea:	8e bb       	out	0x1e, r24	; 30
 1ec:	8e b3       	in	r24, 0x1e	; 30
 1ee:	8f 7d       	andi	r24, 0xDF	; 223
 1f0:	8e bb       	out	0x1e, r24	; 30
 1f2:	8e b3       	in	r24, 0x1e	; 30
 1f4:	8f 7e       	andi	r24, 0xEF	; 239
 1f6:	8e bb       	out	0x1e, r24	; 30
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 1fe:	08 95       	ret

00000200 <main>:
	// GPIOR0 |= (1<<IS10MS) ES LO MISMO GPIOR0 |= _BV(IS10MS);
	// GPIOR0 |= (1<<5);  PONE SOLO El BIT 5 DEL REGISTRO EN 1
	// GPIOR0 &= ~(1<<5); PONE SOLO EL BIT 5 DEL REGISTRO EN 0
	
	// El START de assembler
	cli();
 200:	f8 94       	cli
	ini_ports();
 202:	0e 94 ab 00 	call	0x156	; 0x156 <ini_ports>
	ini_Timer1();
 206:	0e 94 b0 00 	call	0x160	; 0x160 <ini_Timer1>
	ini_USART0();
 20a:	0e 94 cf 00 	call	0x19e	; 0x19e <ini_USART0>
	ini_ExtInterrupt();
 20e:	0e 94 c7 00 	call	0x18e	; 0x18e <ini_ExtInterrupt>
	sei();
 212:	78 94       	sei
	
	indexReadTx = 0;
 214:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <indexReadTx>
	indexWriteTx = 0;
 218:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <indexWriteTx>
	lastMedicion.myword_16 = 0;
 21c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <lastMedicion+0x1>
 220:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <lastMedicion>
	tEchoUP.myword_16 = 0;
 224:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	tEchoDOWN.myword_16 = 0;
 22c:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <tEchoDOWN+0x1>
 230:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <tEchoDOWN>
	
	time1 = TIME1;
 234:	82 e3       	ldi	r24, 0x32	; 50
 236:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <time1>
	
	
    while (1) 
    {
		
		if (GPIOR0 & (1<<F10US))
 23a:	f2 9b       	sbis	0x1e, 2	; 30
 23c:	0e c0       	rjmp	.+28     	; 0x25a <main+0x5a>
		{
			GPIOR0 &= ~(1<<F10US);
 23e:	8e b3       	in	r24, 0x1e	; 30
 240:	8b 7f       	andi	r24, 0xFB	; 251
 242:	8e bb       	out	0x1e, r24	; 30
			
			if (GPIOR0 & (1<<FTRIGGER)){
 244:	f7 9b       	sbis	0x1e, 7	; 30
 246:	09 c0       	rjmp	.+18     	; 0x25a <main+0x5a>
				if (PINB & (1<<TRIGGER)){		//!< Description: Si el trigger está en 1 pongo la flag en 0
 248:	19 9b       	sbis	0x03, 1	; 3
 24a:	03 c0       	rjmp	.+6      	; 0x252 <main+0x52>
					GPIOR0 &= ~(1<<FTRIGGER);	//!< Description: Porque no necesito hacer toggle de nuevo
 24c:	8e b3       	in	r24, 0x1e	; 30
 24e:	8f 77       	andi	r24, 0x7F	; 127
 250:	8e bb       	out	0x1e, r24	; 30
				}
				PORTB ^= (1<<TRIGGER);			//!< Description: Toggle del pin de trigger
 252:	95 b1       	in	r25, 0x05	; 5
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	89 27       	eor	r24, r25
 258:	85 b9       	out	0x05, r24	; 5
			}
				
			
		}
		
		if (GPIOR0 & (1<<F10MS)){
 25a:	f0 99       	sbic	0x1e, 0	; 30
			do_10ms();
 25c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <do_10ms>
		}
		
		if (GPIOR0 & (1<<ECHOFINISH))
 260:	f4 9b       	sbis	0x1e, 4	; 30
 262:	1d c0       	rjmp	.+58     	; 0x29e <main+0x9e>
		{
			GPIOR0 &= ~(1<<ECHOFINISH);
 264:	8e b3       	in	r24, 0x1e	; 30
 266:	8f 7e       	andi	r24, 0xEF	; 239
 268:	8e bb       	out	0x1e, r24	; 30
			lastMedicion.myword_16 = (tEchoDOWN.myword_16 - tEchoUP.myword_16)/116;
 26a:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <tEchoDOWN>
 26e:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <tEchoDOWN+0x1>
 272:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 276:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 27a:	28 1b       	sub	r18, r24
 27c:	39 0b       	sbc	r19, r25
 27e:	af e9       	ldi	r26, 0x9F	; 159
 280:	b6 e4       	ldi	r27, 0x46	; 70
 282:	0e 94 19 02 	call	0x432	; 0x432 <__umulhisi3>
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	92 95       	swap	r25
 28c:	82 95       	swap	r24
 28e:	8f 70       	andi	r24, 0x0F	; 15
 290:	89 27       	eor	r24, r25
 292:	9f 70       	andi	r25, 0x0F	; 15
 294:	89 27       	eor	r24, r25
 296:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lastMedicion+0x1>
 29a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lastMedicion>
		}
		
		if(GPIOR0 & (1<<F100MS)){
 29e:	f1 9b       	sbis	0x1e, 1	; 30
 2a0:	b2 c0       	rjmp	.+356    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			GPIOR0 &= ~(1<<F100MS);
 2a2:	8e b3       	in	r24, 0x1e	; 30
 2a4:	8d 7f       	andi	r24, 0xFD	; 253
 2a6:	8e bb       	out	0x1e, r24	; 30
			PORTB ^= (1<<LEDBUILDIN);
 2a8:	95 b1       	in	r25, 0x05	; 5
 2aa:	80 e2       	ldi	r24, 0x20	; 32
 2ac:	89 27       	eor	r24, r25
 2ae:	85 b9       	out	0x05, r24	; 5
			buffTx[indexWriteTx++] = 'E';
 2b0:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <indexWriteTx>
 2b4:	e1 e0       	ldi	r30, 0x01	; 1
 2b6:	ea 0f       	add	r30, r26
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	a9 5f       	subi	r26, 0xF9	; 249
 2bc:	be 4f       	sbci	r27, 0xFE	; 254
 2be:	45 e4       	ldi	r20, 0x45	; 69
 2c0:	4c 93       	st	X, r20
			buffTx[indexWriteTx++] = 'U';
 2c2:	a1 e0       	ldi	r26, 0x01	; 1
 2c4:	ae 0f       	add	r26, r30
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	e9 5f       	subi	r30, 0xF9	; 249
 2ca:	fe 4f       	sbci	r31, 0xFE	; 254
 2cc:	85 e5       	ldi	r24, 0x55	; 85
 2ce:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = 'P';
 2d0:	e1 e0       	ldi	r30, 0x01	; 1
 2d2:	ea 0f       	add	r30, r26
 2d4:	b0 e0       	ldi	r27, 0x00	; 0
 2d6:	a9 5f       	subi	r26, 0xF9	; 249
 2d8:	be 4f       	sbci	r27, 0xFE	; 254
 2da:	80 e5       	ldi	r24, 0x50	; 80
 2dc:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = ':'; 
 2de:	a1 e0       	ldi	r26, 0x01	; 1
 2e0:	ae 0f       	add	r26, r30
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	e9 5f       	subi	r30, 0xF9	; 249
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	2a e3       	ldi	r18, 0x3A	; 58
 2ea:	20 83       	st	Z, r18
			buffTx[indexWriteTx++] = tEchoUP.myword_8[0];
 2ec:	e1 e0       	ldi	r30, 0x01	; 1
 2ee:	ea 0f       	add	r30, r26
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	c0 e0       	ldi	r28, 0x00	; 0
 2f4:	d1 e0       	ldi	r29, 0x01	; 1
 2f6:	88 81       	ld	r24, Y
 2f8:	a9 5f       	subi	r26, 0xF9	; 249
 2fa:	be 4f       	sbci	r27, 0xFE	; 254
 2fc:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = tEchoUP.myword_8[1];
 2fe:	a1 e0       	ldi	r26, 0x01	; 1
 300:	ae 0f       	add	r26, r30
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	89 81       	ldd	r24, Y+1	; 0x01
 306:	e9 5f       	subi	r30, 0xF9	; 249
 308:	fe 4f       	sbci	r31, 0xFE	; 254
 30a:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ';';
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	ea 0f       	add	r30, r26
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	a9 5f       	subi	r26, 0xF9	; 249
 314:	be 4f       	sbci	r27, 0xFE	; 254
 316:	9b e3       	ldi	r25, 0x3B	; 59
 318:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 31a:	a1 e0       	ldi	r26, 0x01	; 1
 31c:	ae 0f       	add	r26, r30
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	e9 5f       	subi	r30, 0xF9	; 249
 322:	fe 4f       	sbci	r31, 0xFE	; 254
 324:	8a e0       	ldi	r24, 0x0A	; 10
 326:	80 83       	st	Z, r24
			
			buffTx[indexWriteTx++] = 'E';
 328:	e1 e0       	ldi	r30, 0x01	; 1
 32a:	ea 0f       	add	r30, r26
 32c:	b0 e0       	ldi	r27, 0x00	; 0
 32e:	a9 5f       	subi	r26, 0xF9	; 249
 330:	be 4f       	sbci	r27, 0xFE	; 254
 332:	4c 93       	st	X, r20
			buffTx[indexWriteTx++] = 'D';
 334:	a1 e0       	ldi	r26, 0x01	; 1
 336:	ae 0f       	add	r26, r30
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	e9 5f       	subi	r30, 0xF9	; 249
 33c:	fe 4f       	sbci	r31, 0xFE	; 254
 33e:	34 e4       	ldi	r19, 0x44	; 68
 340:	30 83       	st	Z, r19
			buffTx[indexWriteTx++] = 'W';
 342:	e1 e0       	ldi	r30, 0x01	; 1
 344:	ea 0f       	add	r30, r26
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	a9 5f       	subi	r26, 0xF9	; 249
 34a:	be 4f       	sbci	r27, 0xFE	; 254
 34c:	57 e5       	ldi	r21, 0x57	; 87
 34e:	5c 93       	st	X, r21
			buffTx[indexWriteTx++] = ':';
 350:	a1 e0       	ldi	r26, 0x01	; 1
 352:	ae 0f       	add	r26, r30
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	e9 5f       	subi	r30, 0xF9	; 249
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	20 83       	st	Z, r18
			buffTx[indexWriteTx++] = tEchoDOWN.myword_8[0];
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	ea 0f       	add	r30, r26
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	c7 e0       	ldi	r28, 0x07	; 7
 364:	d2 e0       	ldi	r29, 0x02	; 2
 366:	58 81       	ld	r21, Y
 368:	a9 5f       	subi	r26, 0xF9	; 249
 36a:	be 4f       	sbci	r27, 0xFE	; 254
 36c:	5c 93       	st	X, r21
			buffTx[indexWriteTx++] = tEchoDOWN.myword_8[1];
 36e:	a1 e0       	ldi	r26, 0x01	; 1
 370:	ae 0f       	add	r26, r30
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	59 81       	ldd	r21, Y+1	; 0x01
 376:	e9 5f       	subi	r30, 0xF9	; 249
 378:	fe 4f       	sbci	r31, 0xFE	; 254
 37a:	50 83       	st	Z, r21
			buffTx[indexWriteTx++] = ';';
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	ea 0f       	add	r30, r26
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	a9 5f       	subi	r26, 0xF9	; 249
 384:	be 4f       	sbci	r27, 0xFE	; 254
 386:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 388:	a1 e0       	ldi	r26, 0x01	; 1
 38a:	ae 0f       	add	r26, r30
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	e9 5f       	subi	r30, 0xF9	; 249
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	80 83       	st	Z, r24
			
			buffTx[indexWriteTx++] = 'M';
 394:	e1 e0       	ldi	r30, 0x01	; 1
 396:	ea 0f       	add	r30, r26
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	a9 5f       	subi	r26, 0xF9	; 249
 39c:	be 4f       	sbci	r27, 0xFE	; 254
 39e:	5d e4       	ldi	r21, 0x4D	; 77
 3a0:	5c 93       	st	X, r21
			buffTx[indexWriteTx++] = 'E';
 3a2:	a1 e0       	ldi	r26, 0x01	; 1
 3a4:	ae 0f       	add	r26, r30
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e9 5f       	subi	r30, 0xF9	; 249
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	40 83       	st	Z, r20
			buffTx[indexWriteTx++] = 'D';
 3ae:	e1 e0       	ldi	r30, 0x01	; 1
 3b0:	ea 0f       	add	r30, r26
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	a9 5f       	subi	r26, 0xF9	; 249
 3b6:	be 4f       	sbci	r27, 0xFE	; 254
 3b8:	3c 93       	st	X, r19
			buffTx[indexWriteTx++] = ':';
 3ba:	a1 e0       	ldi	r26, 0x01	; 1
 3bc:	ae 0f       	add	r26, r30
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	e9 5f       	subi	r30, 0xF9	; 249
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	20 83       	st	Z, r18
			buffTx[indexWriteTx++] = lastMedicion.myword_8[0];
 3c6:	e1 e0       	ldi	r30, 0x01	; 1
 3c8:	ea 0f       	add	r30, r26
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	c4 e0       	ldi	r28, 0x04	; 4
 3ce:	d1 e0       	ldi	r29, 0x01	; 1
 3d0:	28 81       	ld	r18, Y
 3d2:	a9 5f       	subi	r26, 0xF9	; 249
 3d4:	be 4f       	sbci	r27, 0xFE	; 254
 3d6:	2c 93       	st	X, r18
			buffTx[indexWriteTx++] = lastMedicion.myword_8[1];
 3d8:	a1 e0       	ldi	r26, 0x01	; 1
 3da:	ae 0f       	add	r26, r30
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	29 81       	ldd	r18, Y+1	; 0x01
 3e0:	e9 5f       	subi	r30, 0xF9	; 249
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	20 83       	st	Z, r18
			buffTx[indexWriteTx++] = ';';
 3e6:	e1 e0       	ldi	r30, 0x01	; 1
 3e8:	ea 0f       	add	r30, r26
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	a9 5f       	subi	r26, 0xF9	; 249
 3ee:	be 4f       	sbci	r27, 0xFE	; 254
 3f0:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 3f2:	91 e0       	ldi	r25, 0x01	; 1
 3f4:	9e 0f       	add	r25, r30
 3f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <indexWriteTx>
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	e9 5f       	subi	r30, 0xF9	; 249
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 83       	st	Z, r24
			
			start_Med();
 402:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <start_Med>
		}
		
		if (UCSR0A & (1<<UDRE0))
 406:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 40a:	85 ff       	sbrs	r24, 5
 40c:	16 cf       	rjmp	.-468    	; 0x23a <main+0x3a>
			if (indexReadTx != indexWriteTx)
 40e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexReadTx>
 412:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <indexWriteTx>
 416:	e8 17       	cp	r30, r24
 418:	09 f4       	brne	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	0f cf       	rjmp	.-482    	; 0x23a <main+0x3a>
				UDR0 = buffTx[indexReadTx++];
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	8e 0f       	add	r24, r30
 420:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexReadTx>
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	e9 5f       	subi	r30, 0xF9	; 249
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	80 81       	ld	r24, Z
 42c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 430:	04 cf       	rjmp	.-504    	; 0x23a <main+0x3a>

00000432 <__umulhisi3>:
 432:	a2 9f       	mul	r26, r18
 434:	b0 01       	movw	r22, r0
 436:	b3 9f       	mul	r27, r19
 438:	c0 01       	movw	r24, r0
 43a:	a3 9f       	mul	r26, r19
 43c:	70 0d       	add	r23, r0
 43e:	81 1d       	adc	r24, r1
 440:	11 24       	eor	r1, r1
 442:	91 1d       	adc	r25, r1
 444:	b2 9f       	mul	r27, r18
 446:	70 0d       	add	r23, r0
 448:	81 1d       	adc	r24, r1
 44a:	11 24       	eor	r1, r1
 44c:	91 1d       	adc	r25, r1
 44e:	08 95       	ret

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
