
Seleccionador_Cajas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800100  00800100  00000330  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000826  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000656  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001cd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  88:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:

void start_Med(){
	GPIOR0 |= (1<<FTRIGGER);
}

void do_Trigger(){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	80 5e       	subi	r24, 0xE0	; 224
  ac:	91 4b       	sbci	r25, 0xB1	; 177
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
  b2:	8e b3       	in	r24, 0x1e	; 30
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8e bb       	out	0x1e, r24	; 30
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_12>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	ea e8       	ldi	r30, 0x8A	; 138
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	44 96       	adiw	r24, 0x14	; 20
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	8e b3       	in	r24, 0x1e	; 30
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8e bb       	out	0x1e, r24	; 30
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_1>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <ini_ports>:
 116:	82 e2       	ldi	r24, 0x22	; 34
 118:	84 b9       	out	0x04, r24	; 4
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret

00000120 <ini_Timer1>:
 120:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	9e e4       	ldi	r25, 0x4E	; 78
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 136:	84 e1       	ldi	r24, 0x14	; 20
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 13e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 148:	86 b3       	in	r24, 0x16	; 22
 14a:	86 bb       	out	0x16, r24	; 22
 14c:	08 95       	ret

0000014e <ini_ExtInterrupt>:
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	8d bb       	out	0x1d, r24	; 29
 158:	8c b3       	in	r24, 0x1c	; 28
 15a:	8c bb       	out	0x1c, r24	; 28
 15c:	08 95       	ret

0000015e <ini_USART0>:
 15e:	e0 ec       	ldi	r30, 0xC0	; 192
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 83       	st	Z, r24
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 83       	st	Z, r24
 16a:	88 e0       	ldi	r24, 0x08	; 8
 16c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 176:	80 e1       	ldi	r24, 0x10	; 16
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 17e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 182:	08 95       	ret

00000184 <do_10ms>:
 184:	8e b3       	in	r24, 0x1e	; 30
 186:	8e 7f       	andi	r24, 0xFE	; 254
 188:	8e bb       	out	0x1e, r24	; 30
 18a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time1>
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
 194:	81 11       	cpse	r24, r1
 196:	06 c0       	rjmp	.+12     	; 0x1a4 <do_10ms+0x20>
 198:	82 e3       	ldi	r24, 0x32	; 50
 19a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
 19e:	8e b3       	in	r24, 0x1e	; 30
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	8e bb       	out	0x1e, r24	; 30
 1a4:	08 95       	ret

000001a6 <start_Med>:
 1a6:	8e b3       	in	r24, 0x1e	; 30
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	8e bb       	out	0x1e, r24	; 30
 1ac:	08 95       	ret

000001ae <main>:
	// GPIOR0 |= (1<<IS10MS) ES LO MISMO GPIOR0 |= _BV(IS10MS);
	// GPIOR0 |= (1<<5);  PONE SOLO El BIT 5 DEL REGISTRO EN 1
	// GPIOR0 &= ~(1<<5); PONE SOLO EL BIT 5 DEL REGISTRO EN 0
	
	// El START de assembler
	cli();
 1ae:	f8 94       	cli
	ini_ports();
 1b0:	0e 94 8b 00 	call	0x116	; 0x116 <ini_ports>
	ini_Timer1();
 1b4:	0e 94 90 00 	call	0x120	; 0x120 <ini_Timer1>
	ini_USART0();
 1b8:	0e 94 af 00 	call	0x15e	; 0x15e <ini_USART0>
	ini_ExtInterrupt();
 1bc:	0e 94 a7 00 	call	0x14e	; 0x14e <ini_ExtInterrupt>
	start_Med();
 1c0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <start_Med>
	sei();
 1c4:	78 94       	sei
	
	indexReadTx = 0;
 1c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	indexWriteTx = 0;
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <indexWriteTx>
	lastMedicion = 0;
 1ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <lastMedicion>
	
	time1 = TIME1;
 1d2:	82 e3       	ldi	r24, 0x32	; 50
 1d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
	
	
    while (1) 
    {
		
		if (GPIOR0 & (1<<F10US))
 1d8:	f2 9b       	sbis	0x1e, 2	; 30
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <main+0x50>
		{
			GPIOR0 &= ~(1<<F10US);
 1dc:	8e b3       	in	r24, 0x1e	; 30
 1de:	8b 7f       	andi	r24, 0xFB	; 251
 1e0:	8e bb       	out	0x1e, r24	; 30
			
			if (!(PINB & (1<<TRIGGER)))
 1e2:	19 99       	sbic	0x03, 1	; 3
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <main+0x4a>
			{
				if ((GPIOR0 & (1<<FTRIGGER)))
 1e6:	f7 9b       	sbis	0x1e, 7	; 30
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <main+0x50>
				{
					GPIOR0	&= ~(1<<FTRIGGER);
 1ea:	8e b3       	in	r24, 0x1e	; 30
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	8e bb       	out	0x1e, r24	; 30
					PORTB	|= (1<<TRIGGER);
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <main+0x50>
				}
			}else{
				PORTB &= ~(1<<TRIGGER);
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	8d 7f       	andi	r24, 0xFD	; 253
 1fc:	85 b9       	out	0x05, r24	; 5
			}
				
			
		}
		
		if (GPIOR0 & (1<<F10MS)){
 1fe:	f0 99       	sbic	0x1e, 0	; 30
			do_10ms();
 200:	0e 94 c2 00 	call	0x184	; 0x184 <do_10ms>
		}
		
		if(GPIOR0 & (1<<F100MS)){
 204:	f1 9b       	sbis	0x1e, 1	; 30
 206:	42 c0       	rjmp	.+132    	; 0x28c <main+0xde>
			GPIOR0 &= ~(1<<F100MS);
 208:	8e b3       	in	r24, 0x1e	; 30
 20a:	8d 7f       	andi	r24, 0xFD	; 253
 20c:	8e bb       	out	0x1e, r24	; 30
			PORTB ^= (1<<LEDBUILDIN);
 20e:	95 b1       	in	r25, 0x05	; 5
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	89 27       	eor	r24, r25
 214:	85 b9       	out	0x05, r24	; 5
			buffTx[indexWriteTx++] = 'M';
 216:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <indexWriteTx>
 21a:	a1 e0       	ldi	r26, 0x01	; 1
 21c:	ae 0f       	add	r26, r30
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ec 5f       	subi	r30, 0xFC	; 252
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	8d e4       	ldi	r24, 0x4D	; 77
 226:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = 'E';
 228:	e1 e0       	ldi	r30, 0x01	; 1
 22a:	ea 0f       	add	r30, r26
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	ac 5f       	subi	r26, 0xFC	; 252
 230:	be 4f       	sbci	r27, 0xFE	; 254
 232:	85 e4       	ldi	r24, 0x45	; 69
 234:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = '1';
 236:	a1 e0       	ldi	r26, 0x01	; 1
 238:	ae 0f       	add	r26, r30
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	ec 5f       	subi	r30, 0xFC	; 252
 23e:	fe 4f       	sbci	r31, 0xFE	; 254
 240:	81 e3       	ldi	r24, 0x31	; 49
 242:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ':';
 244:	e1 e0       	ldi	r30, 0x01	; 1
 246:	ea 0f       	add	r30, r26
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	ac 5f       	subi	r26, 0xFC	; 252
 24c:	be 4f       	sbci	r27, 0xFE	; 254
 24e:	8a e3       	ldi	r24, 0x3A	; 58
 250:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = lastMedicion;
 252:	a1 e0       	ldi	r26, 0x01	; 1
 254:	ae 0f       	add	r26, r30
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lastMedicion>
 25c:	ec 5f       	subi	r30, 0xFC	; 252
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ';';
 262:	e1 e0       	ldi	r30, 0x01	; 1
 264:	ea 0f       	add	r30, r26
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	ac 5f       	subi	r26, 0xFC	; 252
 26a:	be 4f       	sbci	r27, 0xFE	; 254
 26c:	9b e3       	ldi	r25, 0x3B	; 59
 26e:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	9e 0f       	add	r25, r30
 274:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <indexWriteTx>
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 5f       	subi	r30, 0xFC	; 252
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	9a e0       	ldi	r25, 0x0A	; 10
 280:	90 83       	st	Z, r25
			lastMedicion++;
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lastMedicion>
			
			start_Med();
 288:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <start_Med>
		}
		
		if (UCSR0A & (1<<UDRE0)){
 28c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 290:	85 ff       	sbrs	r24, 5
 292:	a2 cf       	rjmp	.-188    	; 0x1d8 <main+0x2a>
			if (indexReadTx != indexWriteTx)
 294:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 298:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <indexWriteTx>
 29c:	e8 17       	cp	r30, r24
 29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0xf4>
 2a0:	9b cf       	rjmp	.-202    	; 0x1d8 <main+0x2a>
			{
				UDR0 = buffTx[indexReadTx++];
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	8e 0f       	add	r24, r30
 2a6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 5f       	subi	r30, 0xFC	; 252
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2b6:	90 cf       	rjmp	.-224    	; 0x1d8 <main+0x2a>

000002b8 <_exit>:
 2b8:	f8 94       	cli

000002ba <__stop_program>:
 2ba:	ff cf       	rjmp	.-2      	; 0x2ba <__stop_program>
