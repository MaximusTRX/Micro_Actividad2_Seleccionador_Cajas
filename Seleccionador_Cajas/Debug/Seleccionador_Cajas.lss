
Seleccionador_Cajas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800100  00800100  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007e9  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000656  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c6  00000000  00000000  00001adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001ba1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  88:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	if (UCSR0A & (1<<UDRE0)){
		UDR0 = lastMedicion;					//!< Description: UDR0 es el registro que se carga para mandar los datos
	}
}

void do_Trigger(){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	80 5e       	subi	r24, 0xE0	; 224
  ac:	91 4b       	sbci	r25, 0xB1	; 177
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
  b2:	8e b3       	in	r24, 0x1e	; 30
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8e bb       	out	0x1e, r24	; 30
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_12>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	ea e8       	ldi	r30, 0x8A	; 138
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	44 96       	adiw	r24, 0x14	; 20
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	8e b3       	in	r24, 0x1e	; 30
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8e bb       	out	0x1e, r24	; 30
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <ini_ports>:
 102:	82 e2       	ldi	r24, 0x22	; 34
 104:	84 b9       	out	0x04, r24	; 4
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	85 b9       	out	0x05, r24	; 5
 10a:	08 95       	ret

0000010c <ini_Timer1>:
 10c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	9e e4       	ldi	r25, 0x4E	; 78
 11a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 11e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 122:	84 e1       	ldi	r24, 0x14	; 20
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 12a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 134:	86 b3       	in	r24, 0x16	; 22
 136:	86 bb       	out	0x16, r24	; 22
 138:	08 95       	ret

0000013a <ini_ExtInterrupt>:
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	8d bb       	out	0x1d, r24	; 29
 144:	9c b3       	in	r25, 0x1c	; 28
 146:	9c bb       	out	0x1c, r25	; 28
 148:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 14c:	9b b3       	in	r25, 0x1b	; 27
 14e:	9b bb       	out	0x1b, r25	; 27
 150:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
 154:	08 95       	ret

00000156 <ini_USART0>:
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 83       	st	Z, r24
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 83       	st	Z, r24
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 16e:	80 e1       	ldi	r24, 0x10	; 16
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 17a:	08 95       	ret

0000017c <do_10ms>:
 17c:	8e b3       	in	r24, 0x1e	; 30
 17e:	8e 7f       	andi	r24, 0xFE	; 254
 180:	8e bb       	out	0x1e, r24	; 30
 182:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time1>
 186:	81 50       	subi	r24, 0x01	; 1
 188:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
 18c:	81 11       	cpse	r24, r1
 18e:	06 c0       	rjmp	.+12     	; 0x19c <do_10ms+0x20>
 190:	82 e3       	ldi	r24, 0x32	; 50
 192:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
 196:	8e b3       	in	r24, 0x1e	; 30
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	8e bb       	out	0x1e, r24	; 30
 19c:	08 95       	ret

0000019e <main>:
	// GPIOR0 |= (1<<IS10MS) ES LO MISMO GPIOR0 |= _BV(IS10MS);
	// GPIOR0 |= (1<<5);  PONE SOLO El BIT 5 DEL REGISTRO EN 1
	// GPIOR0 &= ~(1<<5); PONE SOLO EL BIT 5 DEL REGISTRO EN 0
	
	// El START de assembler
	cli();
 19e:	f8 94       	cli
	ini_ports();
 1a0:	0e 94 81 00 	call	0x102	; 0x102 <ini_ports>
	ini_Timer1();
 1a4:	0e 94 86 00 	call	0x10c	; 0x10c <ini_Timer1>
	ini_USART0();
 1a8:	0e 94 ab 00 	call	0x156	; 0x156 <ini_USART0>
	ini_ExtInterrupt();
 1ac:	0e 94 9d 00 	call	0x13a	; 0x13a <ini_ExtInterrupt>
	sei();
 1b0:	78 94       	sei
	
	indexReadTx = 0;
 1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	indexWriteTx = 0;
 1b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <indexWriteTx>
	lastMedicion = 0;
 1ba:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <lastMedicion>
	
	time1 = TIME1;
 1be:	82 e3       	ldi	r24, 0x32	; 50
 1c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <time1>
	
	
    while (1) 
    {
		
		if (GPIOR0 & (1<<F10US))
 1c4:	f2 9b       	sbis	0x1e, 2	; 30
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <main+0x30>
		{
			GPIOR0 &= ~(1<<F10US);
 1c8:	8e b3       	in	r24, 0x1e	; 30
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	8e bb       	out	0x1e, r24	; 30
			do_Trigger();
			
		}
		
		if (GPIOR0 & (1<<F10MS)){
 1ce:	f0 99       	sbic	0x1e, 0	; 30
			do_10ms();
 1d0:	0e 94 be 00 	call	0x17c	; 0x17c <do_10ms>
		}
		
		if(GPIOR0 & (1<<F100MS)){
 1d4:	f1 9b       	sbis	0x1e, 1	; 30
 1d6:	40 c0       	rjmp	.+128    	; 0x258 <main+0xba>
			GPIOR0 &= ~(1<<F100MS);
 1d8:	8e b3       	in	r24, 0x1e	; 30
 1da:	8d 7f       	andi	r24, 0xFD	; 253
 1dc:	8e bb       	out	0x1e, r24	; 30
			PORTB ^= (1<<LEDBUILDIN);
 1de:	95 b1       	in	r25, 0x05	; 5
 1e0:	80 e2       	ldi	r24, 0x20	; 32
 1e2:	89 27       	eor	r24, r25
 1e4:	85 b9       	out	0x05, r24	; 5
			buffTx[indexWriteTx++] = 'M';
 1e6:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <indexWriteTx>
 1ea:	a1 e0       	ldi	r26, 0x01	; 1
 1ec:	ae 0f       	add	r26, r30
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	ec 5f       	subi	r30, 0xFC	; 252
 1f2:	fe 4f       	sbci	r31, 0xFE	; 254
 1f4:	8d e4       	ldi	r24, 0x4D	; 77
 1f6:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = 'E';
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	ea 0f       	add	r30, r26
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	ac 5f       	subi	r26, 0xFC	; 252
 200:	be 4f       	sbci	r27, 0xFE	; 254
 202:	85 e4       	ldi	r24, 0x45	; 69
 204:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = '1';
 206:	a1 e0       	ldi	r26, 0x01	; 1
 208:	ae 0f       	add	r26, r30
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ec 5f       	subi	r30, 0xFC	; 252
 20e:	fe 4f       	sbci	r31, 0xFE	; 254
 210:	81 e3       	ldi	r24, 0x31	; 49
 212:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ':';
 214:	e1 e0       	ldi	r30, 0x01	; 1
 216:	ea 0f       	add	r30, r26
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	ac 5f       	subi	r26, 0xFC	; 252
 21c:	be 4f       	sbci	r27, 0xFE	; 254
 21e:	8a e3       	ldi	r24, 0x3A	; 58
 220:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = lastMedicion;
 222:	a1 e0       	ldi	r26, 0x01	; 1
 224:	ae 0f       	add	r26, r30
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <lastMedicion>
 22c:	ec 5f       	subi	r30, 0xFC	; 252
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ';';
 232:	e1 e0       	ldi	r30, 0x01	; 1
 234:	ea 0f       	add	r30, r26
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	ac 5f       	subi	r26, 0xFC	; 252
 23a:	be 4f       	sbci	r27, 0xFE	; 254
 23c:	9b e3       	ldi	r25, 0x3B	; 59
 23e:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	9e 0f       	add	r25, r30
 244:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <indexWriteTx>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	ec 5f       	subi	r30, 0xFC	; 252
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	9a e0       	ldi	r25, 0x0A	; 10
 250:	90 83       	st	Z, r25
			lastMedicion++;
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lastMedicion>
			
		}
		
		if (UCSR0A & (1<<UDRE0)){
 258:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 25c:	85 ff       	sbrs	r24, 5
 25e:	b2 cf       	rjmp	.-156    	; 0x1c4 <main+0x26>
			if (indexReadTx != indexWriteTx)
 260:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 264:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <indexWriteTx>
 268:	e8 17       	cp	r30, r24
 26a:	09 f4       	brne	.+2      	; 0x26e <main+0xd0>
 26c:	ab cf       	rjmp	.-170    	; 0x1c4 <main+0x26>
			{
				UDR0 = buffTx[indexReadTx++];
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	8e 0f       	add	r24, r30
 272:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	ec 5f       	subi	r30, 0xFC	; 252
 27a:	fe 4f       	sbci	r31, 0xFE	; 254
 27c:	80 81       	ld	r24, Z
 27e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 282:	a0 cf       	rjmp	.-192    	; 0x1c4 <main+0x26>

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
