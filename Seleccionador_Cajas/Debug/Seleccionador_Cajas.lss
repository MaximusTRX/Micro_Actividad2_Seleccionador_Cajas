
Seleccionador_Cajas.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000358  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000108  00800100  00800100  000003cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084a  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000656  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000448  00000000  00000000  00001354  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000432  00000000  00000000  000018c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010f  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00001e05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_12>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  88:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
	
	EICRA	= (1<<ISC01) | (1<<ISC00);	//!< Description: Habilita que flanco genera la interrupción. Rising: 0-0. Falling: 1-0.
	EIFR	= EIFR;						//!< Description: Flag de interrupciones externas
}

void do_Trigger(){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
  9e:	ef 93       	push	r30
  a0:	ff 93       	push	r31
  a2:	e8 e8       	ldi	r30, 0x88	; 136
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	91 81       	ldd	r25, Z+1	; 0x01
  aa:	80 5e       	subi	r24, 0xE0	; 224
  ac:	91 4b       	sbci	r25, 0xB1	; 177
  ae:	91 83       	std	Z+1, r25	; 0x01
  b0:	80 83       	st	Z, r24
  b2:	8e b3       	in	r24, 0x1e	; 30
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8e bb       	out	0x1e, r24	; 30
  b8:	ff 91       	pop	r31
  ba:	ef 91       	pop	r30
  bc:	9f 91       	pop	r25
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_12>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
  dc:	ea e8       	ldi	r30, 0x8A	; 138
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	91 81       	ldd	r25, Z+1	; 0x01
  e4:	44 96       	adiw	r24, 0x14	; 20
  e6:	91 83       	std	Z+1, r25	; 0x01
  e8:	80 83       	st	Z, r24
  ea:	8e b3       	in	r24, 0x1e	; 30
  ec:	84 60       	ori	r24, 0x04	; 4
  ee:	8e bb       	out	0x1e, r24	; 30
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_1>:
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	0a b4       	in	r0, 0x2a	; 42
 112:	05 fc       	sbrc	r0, 5
 114:	0f c0       	rjmp	.+30     	; 0x134 <__vector_1+0x32>
 116:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 11a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 11e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 12c:	8a b5       	in	r24, 0x2a	; 42
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	8a bd       	out	0x2a, r24	; 42
 132:	0b c0       	rjmp	.+22     	; 0x14a <__vector_1+0x48>
 134:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 138:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 13c:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <tEchoDOWN+0x1>
 140:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <tEchoDOWN>
 144:	8a b5       	in	r24, 0x2a	; 42
 146:	80 61       	ori	r24, 0x10	; 16
 148:	8a bd       	out	0x2a, r24	; 42
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <ini_ports>:
 158:	82 e2       	ldi	r24, 0x22	; 34
 15a:	84 b9       	out	0x04, r24	; 4
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	85 b9       	out	0x05, r24	; 5
 160:	08 95       	ret

00000162 <ini_Timer1>:
 162:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	9e e4       	ldi	r25, 0x4E	; 78
 170:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 174:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 178:	84 e1       	ldi	r24, 0x14	; 20
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 180:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 18a:	86 b3       	in	r24, 0x16	; 22
 18c:	86 bb       	out	0x16, r24	; 22
 18e:	08 95       	ret

00000190 <ini_ExtInterrupt>:
 190:	83 e0       	ldi	r24, 0x03	; 3
 192:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	8d bb       	out	0x1d, r24	; 29
 19a:	8c b3       	in	r24, 0x1c	; 28
 19c:	8c bb       	out	0x1c, r24	; 28
 19e:	08 95       	ret

000001a0 <ini_USART0>:
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 83       	st	Z, r24
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 83       	st	Z, r24
 1ac:	88 e0       	ldi	r24, 0x08	; 8
 1ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 1b2:	86 e0       	ldi	r24, 0x06	; 6
 1b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 1c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 1c4:	08 95       	ret

000001c6 <do_10ms>:
 1c6:	8e b3       	in	r24, 0x1e	; 30
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	8e bb       	out	0x1e, r24	; 30
 1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time1>
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time1>
 1d6:	81 11       	cpse	r24, r1
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <do_10ms+0x20>
 1da:	82 e3       	ldi	r24, 0x32	; 50
 1dc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time1>
 1e0:	8e b3       	in	r24, 0x1e	; 30
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8e bb       	out	0x1e, r24	; 30
 1e6:	08 95       	ret

000001e8 <start_Med>:
 1e8:	8e b3       	in	r24, 0x1e	; 30
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	8e bb       	out	0x1e, r24	; 30
 1ee:	83 e0       	ldi	r24, 0x03	; 3
 1f0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 1f4:	8c b3       	in	r24, 0x1c	; 28
 1f6:	8c bb       	out	0x1c, r24	; 28
 1f8:	08 95       	ret

000001fa <main>:
	// GPIOR0 |= (1<<IS10MS) ES LO MISMO GPIOR0 |= _BV(IS10MS);
	// GPIOR0 |= (1<<5);  PONE SOLO El BIT 5 DEL REGISTRO EN 1
	// GPIOR0 &= ~(1<<5); PONE SOLO EL BIT 5 DEL REGISTRO EN 0
	
	// El START de assembler
	cli();
 1fa:	f8 94       	cli
	ini_ports();
 1fc:	0e 94 ac 00 	call	0x158	; 0x158 <ini_ports>
	ini_Timer1();
 200:	0e 94 b1 00 	call	0x162	; 0x162 <ini_Timer1>
	ini_USART0();
 204:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <ini_USART0>
	ini_ExtInterrupt();
 208:	0e 94 c8 00 	call	0x190	; 0x190 <ini_ExtInterrupt>
	start_Med();
 20c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <start_Med>
	sei();
 210:	78 94       	sei
	
	indexReadTx = 0;
 212:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <indexReadTx>
	indexWriteTx = 0;
 216:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <indexWriteTx>
	lastMedicion = 0;
 21a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <lastMedicion>
	
	time1 = TIME1;
 21e:	82 e3       	ldi	r24, 0x32	; 50
 220:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time1>
	
	
    while (1) 
    {
		
		if (GPIOR0 & (1<<F10US))
 224:	f2 9b       	sbis	0x1e, 2	; 30
 226:	0f c0       	rjmp	.+30     	; 0x246 <main+0x4c>
		{
			GPIOR0 &= ~(1<<F10US);
 228:	8e b3       	in	r24, 0x1e	; 30
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	8e bb       	out	0x1e, r24	; 30
			
			if (GPIOR1 & (1<<FTRIGGER)){
 22e:	0a b4       	in	r0, 0x2a	; 42
 230:	07 fe       	sbrs	r0, 7
 232:	09 c0       	rjmp	.+18     	; 0x246 <main+0x4c>
				if (PINB & (1<<TRIGGER)){		//!< Description: Si el trigger está en 1 pongo la flag en 0
 234:	19 9b       	sbis	0x03, 1	; 3
 236:	03 c0       	rjmp	.+6      	; 0x23e <main+0x44>
					GPIOR1 &= ~(1<<FTRIGGER);	//!< Description: Porque no necesito hacer toggle de nuevo
 238:	8a b5       	in	r24, 0x2a	; 42
 23a:	8f 77       	andi	r24, 0x7F	; 127
 23c:	8a bd       	out	0x2a, r24	; 42
				}
				PORTB ^= (1<<TRIGGER);			//!< Description: Toggle del pin de trigger
 23e:	95 b1       	in	r25, 0x05	; 5
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	89 27       	eor	r24, r25
 244:	85 b9       	out	0x05, r24	; 5
			}
				
			
		}
		
		if (GPIOR0 & (1<<F10MS)){
 246:	f0 99       	sbic	0x1e, 0	; 30
			do_10ms();
 248:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <do_10ms>
		}
		
		if (GPIOR0 & (1<<ECHOFINISH))
 24c:	f4 9b       	sbis	0x1e, 4	; 30
 24e:	19 c0       	rjmp	.+50     	; 0x282 <main+0x88>
		{
			GPIOR0 &= ~(1<<ECHOFINISH);
 250:	8e b3       	in	r24, 0x1e	; 30
 252:	8f 7e       	andi	r24, 0xEF	; 239
 254:	8e bb       	out	0x1e, r24	; 30
			lastMedicion = (tEchoDOWN - tEchoUP)/58;
 256:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <tEchoDOWN>
 25a:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <tEchoDOWN+0x1>
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 266:	28 1b       	sub	r18, r24
 268:	39 0b       	sbc	r19, r25
 26a:	af e9       	ldi	r26, 0x9F	; 159
 26c:	b6 e4       	ldi	r27, 0x46	; 70
 26e:	0e 94 9b 01 	call	0x336	; 0x336 <__umulhisi3>
 272:	92 95       	swap	r25
 274:	82 95       	swap	r24
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	89 27       	eor	r24, r25
 27a:	9f 70       	andi	r25, 0x0F	; 15
 27c:	89 27       	eor	r24, r25
 27e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lastMedicion>
		}
		
		if(GPIOR0 & (1<<F100MS)){
 282:	f1 9b       	sbis	0x1e, 1	; 30
 284:	42 c0       	rjmp	.+132    	; 0x30a <main+0x110>
			GPIOR0 &= ~(1<<F100MS);
 286:	8e b3       	in	r24, 0x1e	; 30
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	8e bb       	out	0x1e, r24	; 30
			PORTB ^= (1<<LEDBUILDIN);
 28c:	95 b1       	in	r25, 0x05	; 5
 28e:	80 e2       	ldi	r24, 0x20	; 32
 290:	89 27       	eor	r24, r25
 292:	85 b9       	out	0x05, r24	; 5
			buffTx[indexWriteTx++] = 'M';
 294:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <indexWriteTx>
 298:	a1 e0       	ldi	r26, 0x01	; 1
 29a:	ae 0f       	add	r26, r30
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	ea 5f       	subi	r30, 0xFA	; 250
 2a0:	fe 4f       	sbci	r31, 0xFE	; 254
 2a2:	8d e4       	ldi	r24, 0x4D	; 77
 2a4:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = 'E';
 2a6:	e1 e0       	ldi	r30, 0x01	; 1
 2a8:	ea 0f       	add	r30, r26
 2aa:	b0 e0       	ldi	r27, 0x00	; 0
 2ac:	aa 5f       	subi	r26, 0xFA	; 250
 2ae:	be 4f       	sbci	r27, 0xFE	; 254
 2b0:	85 e4       	ldi	r24, 0x45	; 69
 2b2:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = '1';
 2b4:	a1 e0       	ldi	r26, 0x01	; 1
 2b6:	ae 0f       	add	r26, r30
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ea 5f       	subi	r30, 0xFA	; 250
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	81 e3       	ldi	r24, 0x31	; 49
 2c0:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ':';
 2c2:	e1 e0       	ldi	r30, 0x01	; 1
 2c4:	ea 0f       	add	r30, r26
 2c6:	b0 e0       	ldi	r27, 0x00	; 0
 2c8:	aa 5f       	subi	r26, 0xFA	; 250
 2ca:	be 4f       	sbci	r27, 0xFE	; 254
 2cc:	8a e3       	ldi	r24, 0x3A	; 58
 2ce:	8c 93       	st	X, r24
			buffTx[indexWriteTx++] = lastMedicion;
 2d0:	a1 e0       	ldi	r26, 0x01	; 1
 2d2:	ae 0f       	add	r26, r30
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lastMedicion>
 2da:	ea 5f       	subi	r30, 0xFA	; 250
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	80 83       	st	Z, r24
			buffTx[indexWriteTx++] = ';';
 2e0:	e1 e0       	ldi	r30, 0x01	; 1
 2e2:	ea 0f       	add	r30, r26
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	aa 5f       	subi	r26, 0xFA	; 250
 2e8:	be 4f       	sbci	r27, 0xFE	; 254
 2ea:	9b e3       	ldi	r25, 0x3B	; 59
 2ec:	9c 93       	st	X, r25
			buffTx[indexWriteTx++] = 0x0A;
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	9e 0f       	add	r25, r30
 2f2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <indexWriteTx>
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	ea 5f       	subi	r30, 0xFA	; 250
 2fa:	fe 4f       	sbci	r31, 0xFE	; 254
 2fc:	9a e0       	ldi	r25, 0x0A	; 10
 2fe:	90 83       	st	Z, r25
			lastMedicion++;
 300:	8f 5f       	subi	r24, 0xFF	; 255
 302:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lastMedicion>
			
			start_Med();
 306:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <start_Med>
		}
		
		if (UCSR0A & (1<<UDRE0))
 30a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 30e:	85 ff       	sbrs	r24, 5
 310:	89 cf       	rjmp	.-238    	; 0x224 <main+0x2a>
			if (indexReadTx != indexWriteTx)
 312:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <indexReadTx>
 316:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <indexWriteTx>
 31a:	e8 17       	cp	r30, r24
 31c:	09 f4       	brne	.+2      	; 0x320 <main+0x126>
 31e:	82 cf       	rjmp	.-252    	; 0x224 <main+0x2a>
				UDR0 = buffTx[indexReadTx++];
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	8e 0f       	add	r24, r30
 324:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <indexReadTx>
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ea 5f       	subi	r30, 0xFA	; 250
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	80 81       	ld	r24, Z
 330:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 334:	77 cf       	rjmp	.-274    	; 0x224 <main+0x2a>

00000336 <__umulhisi3>:
 336:	a2 9f       	mul	r26, r18
 338:	b0 01       	movw	r22, r0
 33a:	b3 9f       	mul	r27, r19
 33c:	c0 01       	movw	r24, r0
 33e:	a3 9f       	mul	r26, r19
 340:	70 0d       	add	r23, r0
 342:	81 1d       	adc	r24, r1
 344:	11 24       	eor	r1, r1
 346:	91 1d       	adc	r25, r1
 348:	b2 9f       	mul	r27, r18
 34a:	70 0d       	add	r23, r0
 34c:	81 1d       	adc	r24, r1
 34e:	11 24       	eor	r1, r1
 350:	91 1d       	adc	r25, r1
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
